#!/usr/bin/env python3

import argparse
import hashlib
import json
import os
import string
import sys
import urllib.request

from subprocess import check_call

# Parse command line
parser = argparse.ArgumentParser(
    description='Run Synopsis Detect scanner for Black Duck'
)
parser.add_argument('--python-venv', required=True,
                     help="Path to Python venv to use for Python/Pip Detector")
parser.add_argument('--config', '-c', action='append', required=True,
                    help='Config JSON file containing Detect options (may be specified multiple times)')
parser.add_argument('--credentials', '-r', required=True,
                    help='File containing Black Duck Hub credentials')
parser.add_argument('--pdf', action='store_true',
                    help='Generate PDF of results')
parser.add_argument('--dry-run', '-n', action='store_true',
                    help="Dry run (do not upload scan to Hub)")
args = parser.parse_args()

with open(args.credentials, "r") as t:
    creds = json.load(t)

# Merge Detect config files. Only two top-level keys are recognized:
# detect_opts, which is a dict, and source_paths, which is a list. Both
# of these keys will be merged in order from the list of config files.
config = { "detect_opts": {}, "source_paths": [] }
for config_file in args.config:
    with open(config_file, "r") as c:
        config_data = json.load(c)
    if "detect_opts" in config_data:
        config["detect_opts"].update(config_data["detect_opts"])
    if "source_paths" in config_data:
        config["source_paths"].extend(config_data["source_paths"])

# If no source_paths are specified, use the current directory
if not config["source_paths"]:
    config["source_paths"] = ['.']
print(f"Using config: {json.dumps(config, indent=2)}")

# Download desired Detect jar, if necessary
cache_dir = os.path.join(
    os.environ.get("HOME"),
    ".cache",
    "blackduck-detect"
)
if not os.path.exists(cache_dir):
    os.makedirs(cache_dir, exist_ok=True)

# Get the version of the Black Duck Detect jar to use
detect_version = os.environ.get("DETECT_JAR_VERSION", "10.2.1")
detect_filename = f"detect-{detect_version}.jar"
detect_jar = os.path.join(cache_dir, detect_filename)

# Detect jar 9.x and 10.x are served from different paths
if detect_version.startswith("9."):
    print("Using Synopsys Detect")
    detect_url = f"https://repo.blackduck.com/bds-integrations-release/com/synopsys/integration/synopsys-detect/{detect_version}/synopsys-{detect_filename}"
else:
    print("Using Black Duck Detect")
    detect_url = f"https://repo.blackduck.com/bds-integrations-release/com/blackduck/integration/detect/{detect_version}/{detect_filename}"

if not os.path.exists(detect_jar):
    # Download jar and compute checksum
    print(f"\n\n********\nDownloading {detect_url} to {detect_jar}...")
    try:
        urllib.request.urlretrieve(detect_url, detect_jar)

        # Calculate SHA-256 checksum of downloaded file
        sha256_hash = hashlib.sha256()
        with open(detect_jar, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)

        print(f"Downloaded jar with SHA-256: {sha256_hash.hexdigest()}")
        print("....done!\n********\n\n")

    except:
        if os.path.exists(detect_jar):
            os.remove(detect_jar)
        raise

# Start with default properties, then update with config-file-provided
# ones; this allows config file to override defaults
properties = {
    "blackduck.api.token": creds["token"],
    "blackduck.url": creds["url"],
    "blackduck.trust.cert": "true",
    "blackduck.signature.scanner.trust.cert": "true",
    "detect.project.name": "${PRODUCT}",
    "detect.project.version.name": "${VERSION}",
    "detect.blackduck.signature.scanner.memory": 10240,
    "detect.timeout": 3600,
    "detect.accuracy.required": "NONE",
}
if args.dry_run:
    properties["detect.blackduck.signature.scanner.dry.run"] = "true"
    properties["detect.diagnostic"] = "true"
    properties["detect.cleanup"] = "false"
elif args.pdf:
    # This argument makes the job wait until the scan is fully uploaded
    # to Black Duck Hub. But if "dry.run" is true, it doesn't upload
    # the signature scan results, therefore the scan will never be
    # fully uploaded. So we won't enable the .pdf generation if dry.run
    # is selected.
    properties["detect.risk.report.pdf"] = "true"

properties.update(config["detect_opts"])

# Construct command line by translating properties to args
detect_args = [
    "java", "-jar", detect_jar
]
if args.dry_run:
    # Suggested by Black Duck support
    detect_args.append("-d")
for prop, value in properties.items():
    detect_args.append(
        "--" + prop + "=" + string.Template(str(value)).safe_substitute(os.environ)
    )

# Special sauce for Python - needs to use a separate venv which must
# have been pre-installed with all dependencies. Individual products
# should populate this in their get_additional_source.sh script. The
# venv was created by blackduck-detect-scan.sh and passed in to us.
# https://documentation.blackduck.com/bundle/detect/page/packagemgrs/python.html
venv_path=args.python_venv
detect_args.extend([
    "--detect.pip.path=" + os.path.join(venv_path, "bin", "pip"),
    "--detect.python.path=" + os.path.join(venv_path, "bin", "python")
])
os.environ["VIRTUAL_ENV"] = venv_path

# Iterate through code paths, calling scanner
source_root = os.path.join(os.environ.get("WORKSPACE", "."), "src")
first_path = True
for i, path in enumerate(config["source_paths"], start=1):
    suffix = f"-{i}" if i > 1 else ""
    source_path = os.path.join(source_root, path)
    path_args = [
        "--detect.source.path=" + source_path,
        "--detect.code.location.name=" + "${PRODUCT}/${VERSION}" + suffix,
        "--detect.project.codelocation.unmap=" + f"{first_path}"
    ]

    check_call(detect_args + path_args)

    first_path = False
