#!/usr/bin/env bash

set -ex

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source ${SCRIPT_DIR}/../../utilities/shell-utils.sh

chk_set PRODUCT
chk_set PLATFORM
chk_set PROFILE
chk_set RELEASE
chk_set VERSION
chk_set BLD_NUM

PROD_NAME=${PRODUCT#"cbdeps::"}
PROD_PATH=${PRODUCT//::/\/}

# Un-tarred build source tarball expected to live in this directory.
# Output will be put into ${ROOT_DIR}/install and ${ROOT_DIR}/packages.
if [ -z "${WORKSPACE}" ]; then
    ROOT_DIR=$(pwd)
else
    ROOT_DIR="${WORKSPACE}"
fi
cd "${ROOT_DIR}"

# Ensure latest cbdep tool is on path
mkdir -p tools
CBDEP_URL=https://packages.couchbase.com/cbdep/cbdep-$(uname -s | tr '[A-Z]' '[a-z]')-$(uname -m)
if [ ! -e tools/cbdep ]; then
    curl -Lf -o tools/cbdep ${CBDEP_URL}
    chmod 755 tools/cbdep
fi
export PATH=$(pwd)/tools:${PATH}

# Hacky support for cross-compiling Windows
if [[ "${PLATFORM}" =~ -windowscrosscompile$ ]]; then
    echo "CROSS COMPILING FOR WINDOWS!"
    export PLATFORM=windows_msvc2017
    export ARCH=amd64
else
    chk_set ARCH
fi

# Hacky fix for inconsistent naming of MacOS
if [ "${PLATFORM}" == "macos" ]; then
    export PLATFORM=macosx
fi

#use uname to determine ARCH.  for M1 (DARWIN 20.x+), it should return arm64
if [ "${PLATFORM}" == "macosx" ]; then
    export ARCH=`uname -m`
fi

# Backwards compatibility for old naming of Server cbdeps
if [ "${PROFILE}" != "server" ]; then
    export BLD_NUM="${PROFILE}${BLD_NUM}"
fi

TARBALL_NAME=${PROD_NAME}-${PLATFORM}-${ARCH}-${VERSION}-${BLD_NUM}.tgz
MD5_NAME=${PROD_NAME}-${PLATFORM}-${ARCH}-${VERSION}-${BLD_NUM}.md5

echo "Performing build..."
PACKAGE_DIR="$( cd "$SCRIPT_DIR/../${PROD_NAME}" && pwd )" # build-tools/cbdeps/PACKAGE

INSTALL_DIR=${ROOT_DIR}/install
rm -rf ${INSTALL_DIR}
mkdir -p ${INSTALL_DIR}
${PACKAGE_DIR}/${PROD_NAME}_unix.sh ${INSTALL_DIR} ${ROOT_DIR} ${PLATFORM} ${PROFILE} ${RELEASE} ${VERSION} ${BLD_NUM} ${ARCH}

echo "Preparing for package..."
PACKAGE=${PACKAGE_DIR}/package
if [ -d ${PACKAGE} ]; then
    cp -pr ${PACKAGE}/* ${INSTALL_DIR}
fi
echo ${VERSION}-${BLD_NUM} > ${INSTALL_DIR}/VERSION.txt

echo "Create package..."
PKG_DIR=${ROOT_DIR}/packages/${PROD_NAME}/${VERSION}/${BLD_NUM}
rm -rf ${PKG_DIR}
mkdir -p ${PKG_DIR}
cd ${INSTALL_DIR}
tar zcf ${PKG_DIR}/${TARBALL_NAME} .
md5sum ${PKG_DIR}/${TARBALL_NAME} > ${PKG_DIR}/${MD5_NAME}

if [ "$1" == "install" ]; then
    cp -p ${PKG_DIR}/* ~/.cbdepscache
fi
